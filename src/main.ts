#!/usr/bin/env node
/**
 * AI‰∫§ÊòìÁõëÊéßÁ≥ªÁªü‰∏ªÁ®ãÂ∫è
 * ÁõëÊéßAIÂ§ßÊ®°ÂûãÁöÑÂä†ÂØÜË¥ßÂ∏Å‰∫§ÊòìË°å‰∏∫ÔºåÂπ∂Âú®ÊúâÂèòÂåñÊó∂ÂèëÈÄÅ‰ºÅ‰∏öÂæÆ‰ø°ÈÄöÁü•
 */
import * as dotenv from 'dotenv';
import * as fs from 'fs';
import { setupLogging } from './logger';
import { TradingMonitor } from './trading_monitor';
import { TelegramBot } from './telegram_bot';

interface Config {
  telegramBotToken: string;
  telegramChatId: string;
  telegramAdminIds?: string[];
  monitoredModels?: string[];
  apiUrl: string;
  logLevel: string;
  saveHistoryData: boolean;
}

/**
 * Âä†ËΩΩÈÖçÁΩÆÊñá‰ª∂
 */
function loadConfig(): Config {
  // Â∞ùËØïÂä†ËΩΩ.envÊñá‰ª∂
  const envFile = '.env';
  if (!fs.existsSync(envFile)) {
    console.log('Ë≠¶Âëä: Êú™ÊâæÂà∞ .env Êñá‰ª∂');
    console.log('ËØ∑Â§çÂà∂ env.example ‰∏∫ .env Âπ∂ÈÖçÁΩÆÊ≠£Á°ÆÁöÑÂèÇÊï∞');
  }

  dotenv.config({ path: envFile });

  // Ëé∑ÂèñÈÖçÁΩÆ
  const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN;
  if (!telegramBotToken) {
    throw new Error('TELEGRAM_BOT_TOKEN ÈÖçÁΩÆÈ°π‰∏çËÉΩ‰∏∫Á©∫');
  }

  const telegramChatId = process.env.TELEGRAM_CHAT_ID;
  if (!telegramChatId) {
    throw new Error('TELEGRAM_CHAT_ID ÈÖçÁΩÆÈ°π‰∏çËÉΩ‰∏∫Á©∫');
  }

  const monitoredModelsStr = process.env.MONITORED_MODELS || '';
  let monitoredModels: string[] | undefined;
  if (monitoredModelsStr) {
    monitoredModels = monitoredModelsStr
      .split(',')
      .map(m => m.trim())
      .filter(m => m.length > 0);
  }

  const adminIdsStr = process.env.TELEGRAM_ADMIN_IDS || '';
  let telegramAdminIds: string[] | undefined;
  if (adminIdsStr) {
    telegramAdminIds = adminIdsStr
      .split(',')
      .map(id => id.trim())
      .filter(id => id.length > 0);
  }

  const config: Config = {
    telegramBotToken,
    telegramChatId,
    telegramAdminIds,
    monitoredModels,
    apiUrl: process.env.API_URL || 'https://nof1.ai/api/account-totals',
    logLevel: process.env.LOG_LEVEL || 'INFO',
    saveHistoryData: (process.env.SAVE_HISTORY_DATA || 'false').toLowerCase() === 'true'
  };

  return config;
}

/**
 * Ëß£ÊûêÂëΩ‰ª§Ë°åÂèÇÊï∞
 */
function parseArgs(): {
  test: boolean;
  botOnly: boolean;
  enableBot: boolean;
  logLevel: string;
  config?: string;
} {
  const args = process.argv.slice(2);
  const result = {
    test: false,
    botOnly: false,
    enableBot: false,
    logLevel: 'INFO',
    config: undefined as string | undefined
  };

  for (let i = 0; i < args.length; i++) {
    const arg = args[i];
    if (arg === '--test') {
      result.test = true;
    } else if (arg === '--bot-only') {
      result.botOnly = true;
      result.enableBot = true;
    } else if (arg === '--enable-bot') {
      result.enableBot = true;
    } else if (arg === '--log-level' && i + 1 < args.length) {
      result.logLevel = args[i + 1].toUpperCase();
      i++;
    } else if (arg === '--config' && i + 1 < args.length) {
      result.config = args[i + 1];
      i++;
    } else if (arg === '--help' || arg === '-h') {
      console.log(`
AI‰∫§ÊòìÁõëÊéßÁ≥ªÁªü

‰ΩøÁî®ÊñπÊ≥ï:
  node dist/main.js [ÈÄâÈ°π]

ÈÄâÈ°π:
  --test              ÊµãËØïÈÄöÁü•ÂäüËÉΩ
  --enable-bot        ÂêØÂä®ÁõëÊéßÁ≥ªÁªüÂπ∂ÂêåÊó∂ÂêØÁî® Bot ‰∫§‰∫íÂäüËÉΩ
  --bot-only          Âè™ÂêØÂä® Bot ÂäüËÉΩÔºå‰∏çÂêØÂä®Ëá™Âä®ÁõëÊéß
  --log-level LEVEL   ËÆæÁΩÆÊó•ÂøóÁ∫ßÂà´ (DEBUG, INFO, WARNING, ERROR)
  --config PATH       ÊåáÂÆöÈÖçÁΩÆÊñá‰ª∂Ë∑ØÂæÑ
  -h, --help          ÊòæÁ§∫Â∏ÆÂä©‰ø°ÊÅØ

Bot ‰ΩøÁî®ËØ¥Êòé:
  ÂêØÂä® Bot ÂêéÔºåÂèØ‰ª•Âú® Telegram ‰∏≠‰ΩøÁî®‰ª•‰∏ãÂëΩ‰ª§Ôºö
  /report - Êü•ÁúãÊâÄÊúâÊ®°ÂûãÊåÅ‰ªìÊä•Âëä
  /report <Ê®°ÂûãÂêç> - Êü•ÁúãÊåáÂÆöÊ®°ÂûãÊåÅ‰ªì
  /help - Êü•ÁúãÂ∏ÆÂä©‰ø°ÊÅØ
`);
      process.exit(0);
    }
  }

  return result;
}

/**
 * ‰∏ªÂáΩÊï∞
 */
async function main() {
  try {
    const args = parseArgs();

    // ËÆæÁΩÆÊó•Âøó
    const logger = setupLogging(args.logLevel);

    logger.info('AI‰∫§ÊòìÁõëÊéßÁ≥ªÁªüÂêØÂä®');

    // Âä†ËΩΩÈÖçÁΩÆ
    if (args.config) {
      process.env.DOTENV_PATH = args.config;
    }

    const config = loadConfig();

    logger.info('ÈÖçÁΩÆÂä†ËΩΩÂÆåÊàê:');
    logger.info(`  APIÂú∞ÂùÄ: ${config.apiUrl}`);
    logger.info(`  Telegram Chat ID: ${config.telegramChatId}`);
    logger.info(`  ÁõëÊéßÊ®°Âûã: ${config.monitoredModels && config.monitoredModels.length > 0 ? config.monitoredModels.join(', ') : 'ÂÖ®ÈÉ®Ê®°Âûã'}`);
    logger.info(`  Êó•ÂøóÁ∫ßÂà´: ${config.logLevel}`);
    logger.info(`  ‰øùÂ≠òÂéÜÂè≤Êï∞ÊçÆ: ${config.saveHistoryData}`);

    // ÂàõÂª∫ÁõëÊéßÂô®
    const monitor = new TradingMonitor(
      config.apiUrl,
      config.telegramBotToken,
      config.telegramChatId,
      logger,
      config.monitoredModels,
      config.saveHistoryData
    );

    // ÊµãËØïÊ®°Âºè
    if (args.test) {
      logger.info('ËøêË°åÊµãËØïÊ®°Âºè');
      const success = await monitor.testNotification();
      if (success) {
        logger.info('ÊµãËØïÈÄöÁü•ÂèëÈÄÅÊàêÂäü');
        console.log('‚úÖ ÊµãËØïÈÄöÁü•ÂèëÈÄÅÊàêÂäüÔºÅËØ∑Ê£ÄÊü• Telegram ÊòØÂê¶Êî∂Âà∞Ê∂àÊÅØ„ÄÇ');
      } else {
        logger.error('ÊµãËØïÈÄöÁü•ÂèëÈÄÅÂ§±Ë¥•');
        console.log('‚ùå ÊµãËØïÈÄöÁü•ÂèëÈÄÅÂ§±Ë¥•ÔºÅËØ∑Ê£ÄÊü•ÈÖçÁΩÆÊòØÂê¶Ê≠£Á°Æ„ÄÇ');
      }
      process.exit(0);
    }

    // Bot Ê®°Âºè
    if (args.botOnly) {
      logger.info('ÂêØÂä® Bot Ê®°ÂºèÔºà‰ªÖ‰∫§‰∫íÂäüËÉΩÔºâ');
      console.log('ü§ñ Telegram Bot ÂêØÂä®‰∏≠...');
      console.log('üì± ÂèØ‰ª•Âú® Telegram ‰∏≠ÂèëÈÄÅÂëΩ‰ª§Êü•ËØ¢ÊåÅ‰ªì');
      console.log('‚èπÔ∏è  Êåâ Ctrl+C ÂÅúÊ≠¢ Bot');

      const bot = new TelegramBot(
        config.telegramBotToken,
        config.telegramChatId,
        config.apiUrl,
        logger,
        config.monitoredModels,
        config.telegramAdminIds
      );

      process.on('SIGINT', () => {
        console.log('\nüëã Bot Ê≠£Âú®ÂÖ≥Èó≠...');
        bot.stop();
        setTimeout(() => {
          process.exit(0);
        }, 1000);
      });

      process.on('SIGTERM', () => {
        logger.info('Êî∂Âà∞SIGTERM‰ø°Âè∑ÔºåÂÖ≥Èó≠ Bot');
        bot.stop();
        setTimeout(() => {
          process.exit(0);
        }, 1000);
      });

      await bot.start();

      // ‰øùÊåÅËøõÁ®ãËøêË°å
      await new Promise(() => {});
      return;
    }

    // ÂêØÂä®ÁõëÊéß
    logger.info('ÂºÄÂßãÂêØÂä®ÁõëÊéßÁ≥ªÁªü...');
    console.log('üöÄ AI‰∫§ÊòìÁõëÊéßÁ≥ªÁªüÂ∑≤ÂêØÂä®');
    console.log('üìä Á≥ªÁªüÂ∞ÜÊØèÂàÜÈíüÊ£ÄÊü•‰∏ÄÊ¨°ÊåÅ‰ªìÂèòÂåñ');
    console.log('üì± Â¶ÇÊúâ‰∫§ÊòìÂèòÂåñÂ∞ÜÂèëÈÄÅ Telegram ÈÄöÁü•');
    
    // ÂèØÈÄâÂêØÂä® Bot
    let bot: TelegramBot | null = null;
    if (args.enableBot) {
      console.log('ü§ñ ÂêåÊó∂ÂêØÁî® Telegram Bot ‰∫§‰∫íÂäüËÉΩ');
      bot = new TelegramBot(
        config.telegramBotToken,
        config.telegramChatId,
        config.apiUrl,
        logger,
        config.monitoredModels,
        config.telegramAdminIds
      );
      await bot.start();
    }
    
    console.log('‚èπÔ∏è  Êåâ Ctrl+C ÂÅúÊ≠¢ÁõëÊéß');

    // Â§ÑÁêÜËøõÁ®ãÈÄÄÂá∫‰ø°Âè∑
    process.on('SIGINT', () => {
      console.log('\nüëã ÁõëÊéßÁ≥ªÁªüÊ≠£Âú®ÂÖ≥Èó≠...');
      monitor.stopMonitoring();
      if (bot) {
        bot.stop();
      }
      setTimeout(() => {
        process.exit(0);
      }, 1000);
    });

    process.on('SIGTERM', () => {
      logger.info('Êî∂Âà∞SIGTERM‰ø°Âè∑ÔºåÂÖ≥Èó≠ÁõëÊéßÁ≥ªÁªü');
      monitor.stopMonitoring();
      if (bot) {
        bot.stop();
      }
      setTimeout(() => {
        process.exit(0);
      }, 1000);
    });

    await monitor.startMonitoring();

    // ‰øùÊåÅËøõÁ®ãËøêË°å
    await new Promise(() => {});
  } catch (error) {
    console.error(`‚ùå Á≥ªÁªüÂêØÂä®Â§±Ë¥•: ${error}`);
    process.exit(1);
  }
}

// ËøêË°å‰∏ªÂáΩÊï∞
main().catch(error => {
  console.error('Á®ãÂ∫èÂºÇÂ∏∏ÈÄÄÂá∫:', error);
  process.exit(1);
});

